// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { EventsEditorEventsPostData, EventsEditorEventsPostResponse, InfoEditorInfoPostData, InfoEditorInfoPostResponse, UpsertObjectAttributesEditorApiOcelOtypeUpsertAttributesPostData, UpsertObjectAttributesEditorApiOcelOtypeUpsertAttributesPostResponse, TaskStatusTaskStatusGetData, TaskStatusTaskStatusGetResponse, ValidateEmissionRuleValidateEmissionRulePostData, ValidateEmissionRuleValidateEmissionRulePostResponse, GetAvailableAttributesForEmissionRuleGetAvailableAttributesPostData, GetAvailableAttributesForEmissionRuleGetAvailableAttributesPostResponse, ComputeEmissionsComputeEmissionsPostData, ComputeEmissionsComputeEmissionsPostResponse, DiscoverDfgDfgPostData, DiscoverDfgDfgPostResponse, DiscoverEfgEfgPostData, DiscoverEfgEfgPostResponse, OcpnOcpnPostData, OcpnOcpnPostResponse, ObjectAllocationObjectAllocationPostData, ObjectAllocationObjectAllocationPostResponse, ImportOcelImportPostData, ImportOcelImportPostResponse, ImportDefaultOcelImportDefaultGetData, ImportDefaultOcelImportDefaultGetResponse, LoadOcelLoadGetData, LoadOcelLoadGetResponse, DownloadOcelDownloadGetData, DownloadOcelDownloadGetResponse, UpdateStateUpdatePutData, UpdateStateUpdatePutResponse, SampleObjectsSampleObjectsGetData, SampleObjectsSampleObjectsGetResponse, SampleEventsSampleEventsGetData, SampleEventsSampleEventsGetResponse, DefaultOcelsOcelDefaultGetData, DefaultOcelsOcelDefaultGetResponse, GetClimatiqUnitsClimatiqUnitsListGetResponse, UnitSearchUnitsSearchGetData, UnitSearchUnitsSearchGetResponse } from './types.gen';

/**
 * Filtered Events
 * @param data The data for the request.
 * @param data.oceanSessionId
 * @param data.requestBody
 * @param data.page
 * @param data.size
 * @param data.sortBy
 * @returns PaginatedResponse_OcelEvent_ Successful Response
 * @throws ApiError
 */
export const eventsEditorEventsPost = (data: EventsEditorEventsPostData): CancelablePromise<EventsEditorEventsPostResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/editor/events',
        headers: {
            'Ocean-Session-Id': data.oceanSessionId
        },
        query: {
            page: data.page,
            size: data.size,
            sort_by: data.sortBy
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Filtered Events
 * @param data The data for the request.
 * @param data.oceanSessionId
 * @param data.requestBody
 * @returns OCELSummary Successful Response
 * @throws ApiError
 */
export const infoEditorInfoPost = (data: InfoEditorInfoPostData): CancelablePromise<InfoEditorInfoPostResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/editor/info',
        headers: {
            'Ocean-Session-Id': data.oceanSessionId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Upsert Object Attributes
 * @param data The data for the request.
 * @param data.otype
 * @param data.oceanSessionId
 * @param data.requestBody
 * @returns OcelResponse Successful Response
 * @throws ApiError
 */
export const upsertObjectAttributesEditorApiOcelOtypeUpsertAttributesPost = (data: UpsertObjectAttributesEditorApiOcelOtypeUpsertAttributesPostData): CancelablePromise<UpsertObjectAttributesEditorApiOcelOtypeUpsertAttributesPostResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/editor/api/ocel/{otype}/upsert_attributes',
        path: {
            otype: data.otype
        },
        headers: {
            'Ocean-Session-Id': data.oceanSessionId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Task status
 * Return the status of a long-running task.
 * @param data The data for the request.
 * @param data.taskId
 * @param data.oceanSessionId
 * @returns TaskStatusResponse Successful Response
 * @throws ApiError
 */
export const taskStatusTaskStatusGet = (data: TaskStatusTaskStatusGetData): CancelablePromise<TaskStatusTaskStatusGetResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/task-status',
        headers: {
            'Ocean-Session-Id': data.oceanSessionId
        },
        query: {
            task_id: data.taskId
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Validates an emission rule and computes a display name
 * @param data The data for the request.
 * @param data.oceanSessionId
 * @param data.requestBody
 * @returns ValidateEmissionRuleResponse Successful Response
 * @throws ApiError
 */
export const validateEmissionRuleValidateEmissionRulePost = (data: ValidateEmissionRuleValidateEmissionRulePostData): CancelablePromise<ValidateEmissionRuleValidateEmissionRulePostResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/validate-emission-rule',
        headers: {
            'Ocean-Session-Id': data.oceanSessionId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Available Attributes For Emission Rule
 * @param data The data for the request.
 * @param data.oceanSessionId
 * @param data.requestBody
 * @returns GetAvailableAttributesResponse Successful Response
 * @throws ApiError
 */
export const getAvailableAttributesForEmissionRuleGetAvailableAttributesPost = (data: GetAvailableAttributesForEmissionRuleGetAvailableAttributesPostData): CancelablePromise<GetAvailableAttributesForEmissionRuleGetAvailableAttributesPostResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/get-available-attributes',
        headers: {
            'Ocean-Session-Id': data.oceanSessionId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Compute emissions
 * @param data The data for the request.
 * @param data.oceanSessionId
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const computeEmissionsComputeEmissionsPost = (data: ComputeEmissionsComputeEmissionsPostData): CancelablePromise<ComputeEmissionsComputeEmissionsPostResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/compute-emissions',
        headers: {
            'Ocean-Session-Id': data.oceanSessionId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Directly-follows graph discovery
 * @param data The data for the request.
 * @param data.oceanSessionId
 * @param data.requestBody
 * @returns WeightedDirectedGraphResponse Successful Response
 * @throws ApiError
 */
export const discoverDfgDfgPost = (data: DiscoverDfgDfgPostData): CancelablePromise<DiscoverDfgDfgPostResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/dfg',
        headers: {
            'Ocean-Session-Id': data.oceanSessionId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Eventually-follows graph discovery
 * @param data The data for the request.
 * @param data.oceanSessionId
 * @param data.requestBody
 * @returns DirectedGraphResponse Successful Response
 * @throws ApiError
 */
export const discoverEfgEfgPost = (data: DiscoverEfgEfgPostData): CancelablePromise<DiscoverEfgEfgPostResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/efg',
        headers: {
            'Ocean-Session-Id': data.oceanSessionId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * OCPN discovery
 * @param data The data for the request.
 * @param data.oceanSessionId
 * @param data.requestBody
 * @returns OcpnResponse Successful Response
 * @throws ApiError
 */
export const ocpnOcpnPost = (data: OcpnOcpnPostData): CancelablePromise<OcpnOcpnPostResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/ocpn',
        headers: {
            'Ocean-Session-Id': data.oceanSessionId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Allocate emissions from events to objects
 * @param data The data for the request.
 * @param data.oceanSessionId
 * @param data.requestBody
 * @returns ObjectAllocationResponse Successful Response
 * @throws ApiError
 */
export const objectAllocationObjectAllocationPost = (data: ObjectAllocationObjectAllocationPostData): CancelablePromise<ObjectAllocationObjectAllocationPostResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/object-allocation',
        headers: {
            'Ocean-Session-Id': data.oceanSessionId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Import OCEL 2.0 from .sqlite file
 * @param data The data for the request.
 * @param data.name The name of the uploaded file
 * @param data.formData
 * @returns OcelResponse Successful Response
 * @throws ApiError
 */
export const importOcelImportPost = (data: ImportOcelImportPostData): CancelablePromise<ImportOcelImportPostResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/import',
        query: {
            name: data.name
        },
        formData: data.formData,
        mediaType: 'multipart/form-data',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Import default OCEL
 * @param data The data for the request.
 * @param data.key Default OCEL key
 * @param data.version Dataset version (optional)
 * @returns OcelResponse Successful Response
 * @throws ApiError
 */
export const importDefaultOcelImportDefaultGet = (data: ImportDefaultOcelImportDefaultGetData): CancelablePromise<ImportDefaultOcelImportDefaultGetResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/import-default',
        query: {
            key: data.key,
            version: data.version
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Load OCEL
 * @param data The data for the request.
 * @param data.oceanSessionId
 * @returns OcelResponse Successful Response
 * @throws ApiError
 */
export const loadOcelLoadGet = (data: LoadOcelLoadGetData): CancelablePromise<LoadOcelLoadGetResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/load',
        headers: {
            'Ocean-Session-Id': data.oceanSessionId
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Download OCEL including app state
 * @param data The data for the request.
 * @param data.token
 * @param data.oceanSessionId
 * @param data.emissions Controls on what level emission values are included in the resulting OCEL file as a new attribute. To preserve overall emissions, it is not possible to include both event and object emissions.
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const downloadOcelDownloadGet = (data: DownloadOcelDownloadGetData): CancelablePromise<DownloadOcelDownloadGetResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/download',
        headers: {
            token: data.token,
            'Ocean-Session-Id': data.oceanSessionId
        },
        query: {
            emissions: data.emissions
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update user input
 * @param data The data for the request.
 * @param data.oceanSessionId
 * @param data.requestBody
 * @returns UpdateAppStateResponse Successful Response
 * @throws ApiError
 */
export const updateStateUpdatePut = (data: UpdateStateUpdatePutData): CancelablePromise<UpdateStateUpdatePutResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/update',
        headers: {
            'Ocean-Session-Id': data.oceanSessionId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Sample objects
 * @param data The data for the request.
 * @param data.oceanSessionId
 * @returns SampleObjectsResponse Successful Response
 * @throws ApiError
 */
export const sampleObjectsSampleObjectsGet = (data: SampleObjectsSampleObjectsGetData): CancelablePromise<SampleObjectsSampleObjectsGetResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/sample-objects',
        headers: {
            'Ocean-Session-Id': data.oceanSessionId
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Sample events
 * @param data The data for the request.
 * @param data.oceanSessionId
 * @returns SampleEventsResponse Successful Response
 * @throws ApiError
 */
export const sampleEventsSampleEventsGet = (data: SampleEventsSampleEventsGetData): CancelablePromise<SampleEventsSampleEventsGetResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/sample-events',
        headers: {
            'Ocean-Session-Id': data.oceanSessionId
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get default OCEL metadata
 * @param data The data for the request.
 * @param data.onlyLatestVersions
 * @param data.onlyPreloaded
 * @returns DefaultOCEL Successful Response
 * @throws ApiError
 */
export const defaultOcelsOcelDefaultGet = (data: DefaultOcelsOcelDefaultGetData = {}): CancelablePromise<DefaultOcelsOcelDefaultGetResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/ocel/default',
        query: {
            only_latest_versions: data.onlyLatestVersions,
            only_preloaded: data.onlyPreloaded
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get list of climatiq units
 * @returns ClimatiqUnitType Successful Response
 * @throws ApiError
 */
export const getClimatiqUnitsClimatiqUnitsListGet = (): CancelablePromise<GetClimatiqUnitsClimatiqUnitsListGetResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/climatiq/units/list'
    });
};

/**
 * Search for a unit
 * @param data The data for the request.
 * @param data.q
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const unitSearchUnitsSearchGet = (data: UnitSearchUnitsSearchGetData): CancelablePromise<UnitSearchUnitsSearchGetResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/units/search',
        query: {
            q: data.q
        },
        errors: {
            422: 'Validation Error'
        }
    });
};