// This file is auto-generated by @hey-api/openapi-ts

export type ApplyO2ORuleRequest = {
	rule: O2ORule;
};

export type AppState_Input = {
	objectTypeColors?: {
		[key: string]: string;
	} | null;
	objectTypeClasses?: {
		[key: string]: "handling_unit" | "resource";
	} | null;
	attributeUnits?: Array<
		EventAttributeDefinition | ObjectAttributeDefinition
	> | null;
	emissionAttributes?: Array<
		EventAttributeDefinition | ObjectAttributeDefinition
	> | null;
	emissionRules?: Array<EventEmissionRule_Input | E2OEmissionRule_Input> | null;
	objectAllocationConfig?: ObjectAllocationConfig | null;
};

export type AppState_Output = {
	objectTypeColors?: {
		[key: string]: string;
	} | null;
	objectTypeClasses?: {
		[key: string]: "handling_unit" | "resource";
	} | null;
	attributeUnits?: Array<
		EventAttributeDefinition | ObjectAttributeDefinition
	> | null;
	emissionAttributes?: Array<
		EventAttributeDefinition | ObjectAttributeDefinition
	> | null;
	emissionRules?: Array<
		EventEmissionRule_Output | E2OEmissionRule_Output
	> | null;
	objectAllocationConfig?: ObjectAllocationConfig | null;
};

export type Arc = {
	source: string;
	target: string;
	double: boolean;
};

export type BaseResponse = {
	session: string;
	route: string;
	state: string;
	status?: number;
	msg?: string | null;
	appState?: AppState_Output | null;
	emissions?: ProcessEmissions | null;
};

export type Body_import_ocel_import_post = {
	/**
	 * An OCEL 2.0 event log (.sqlite format)
	 */
	file: Blob | File;
};

export type ClimatiqDataVersionInformationRemoved = {
	status: "removed";
	replacedIn: string;
};

export type ClimatiqDataVersionInformationReplaced = {
	status: "replaced";
	replacedIn: string;
	replacedBy: string;
};

export type ClimatiqDataVersionInformationUpToDate = {
	status: "up_to_date";
};

export type ClimatiqEmissionFactor_Input = {
	source: "climatiq";
	attributes: Array<QualifiedAttribute>;
	data: ClimatiqEmissionFactorDetails;
	/**
	 * The emission factor. If not passed, the climatiq API is accessed to retrieve the factor.
	 */
	value?: {
		value: number;
		unit?: {
			/**
			 * Unit symbol
			 */
			symbol: string | null;
			/**
			 * Long name of the unit
			 */
			name: string | null;
			/**
			 * The unit dimensionality, compatible with the `pint` python package
			 */
			dim: {
				[key: string]: number;
			};
		} | null;
	} | null;
};

export type ClimatiqEmissionFactor_Output = {
	source: "climatiq";
	attributes: Array<QualifiedAttribute>;
	data: ClimatiqEmissionFactorDetails;
	/**
	 * The emission factor. If not passed, the climatiq API is accessed to retrieve the factor.
	 */
	value?: {
		value: number;
		unit?: {
			/**
			 * Unit symbol
			 */
			symbol: string | null;
			/**
			 * Long name of the unit
			 */
			name: string | null;
			/**
			 * The unit dimensionality, compatible with the `pint` python package
			 */
			dim: {
				[key: string]: number;
			};
		} | null;
	} | null;
};

export type ClimatiqEmissionFactorDetails = {
	id: string;
	activityId: string;
	accessType: "private" | "public";
	name: string;
	category: string;
	sector: string;
	source: string;
	sourceLink: string;
	uncertainty?: number | null;
	year: number;
	yearReleased: number;
	region: string;
	regionName: string;
	description: string;
	unit: string;
	unitType: string;
	sourceLcaActivity: string;
	supportedCalculationMethods: Array<"ar4" | "ar5" | "ar6">;
	factor?: number | null;
	factorCalculationMethod?: "ar4" | "ar5" | "ar6" | null;
	constituentGases: {
		[key: string]: number | null;
	};
	dataVersionInformation:
		| ClimatiqDataVersionInformationUpToDate
		| ClimatiqDataVersionInformationReplaced
		| ClimatiqDataVersionInformationRemoved;
};

export type accessType = "private" | "public";

export type ClimatiqUnitType = {
	unitType: string;
	units: {
		[key: string]: Array<string>;
	};
};

export type ComputeEmissionsRequestBody = {
	rules: Array<EventEmissionRule_Input | E2OEmissionRule_Input>;
};

export type ComputeEmissionsResponse = {
	session: string;
	route: string;
	state: string;
	status?: number;
	msg?: string | null;
	appState?: AppState_Output | null;
	emissions?: ProcessEmissions | null;
};

/**
 * Definition of a default OCEL on the server, for quick access. Supports pre-loading the OCEL on backend init.
 */
export type DefaultOCEL = {
	key: string;
	name: string;
	version: string;
	file: string;
	url?: string | null;
	preload?: boolean;
	hide?: boolean;
};

export type DirectedGraphResponse = {
	session: string;
	route: string;
	state: string;
	status?: number;
	msg?: string | null;
	appState?: AppState_Output | null;
	emissions?: ProcessEmissions | null;
	graph: {
		[key: string]: Array<string>;
	};
};

export type DistributeRequest = {
	timetable: Array<[string, number]>;
	weights?: {
		[key: string]: number;
	} | null;
};

export type E2OEmissionRule_Input = {
	index: number;
	name?: string | null;
	activity: string;
	factor: LocalEmissionFactor_Input | ClimatiqEmissionFactor_Input;
	/**
	 * Disables validation of the result unit being a weight.
	 */
	ignoreUnit?: boolean;
	type: "E2OEmissionRule";
	objectType: string;
	qualifier?: string | null;
};

export type E2OEmissionRule_Output = {
	index: number;
	name?: string | null;
	activity: string;
	factor: LocalEmissionFactor_Output | ClimatiqEmissionFactor_Output;
	type: "E2OEmissionRule";
	objectType: string;
	qualifier?: string | null;
	readonly defaultName: string;
};

export type EmissionsState = {
	hasImportedEmissions?: boolean;
	hasRuleBasedEmissions?: boolean;
	hasObjectEmissions: boolean;
	readonly hasEmissions: boolean;
};

export type EventAttributeDefinition = {
	target: "event";
	name: string;
	unit?: {
		/**
		 * Unit symbol
		 */
		symbol: string | null;
		/**
		 * Long name of the unit
		 */
		name: string | null;
		/**
		 * The unit dimensionality, compatible with the `pint` python package
		 */
		dim: {
			[key: string]: number;
		};
	} | null;
	activity: string;
};

export type EventEmissionRule_Input = {
	index: number;
	name?: string | null;
	activity: string;
	factor: LocalEmissionFactor_Input | ClimatiqEmissionFactor_Input;
	/**
	 * Disables validation of the result unit being a weight.
	 */
	ignoreUnit?: boolean;
	type: "EventEmissionRule";
};

export type EventEmissionRule_Output = {
	index: number;
	name?: string | null;
	activity: string;
	factor: LocalEmissionFactor_Output | ClimatiqEmissionFactor_Output;
	type: "EventEmissionRule";
	readonly defaultName: string;
};

export type EventFilter = {
	time_span?: TimeSpan | null;
	activity_names?: Array<string> | null;
	object_types?: Array<string> | null;
	object_counts?: Array<NumericalFilter> | null;
	object_attributes_values?: Array<NumericalFilter | NominalFilter> | null;
	event_attributes?: Array<NumericalFilter | NominalFilter> | null;
};

export type GetAvailableAttributesRequest = {
	type: "EventEmissionRule" | "E2OEmissionRule";
	activity: string;
	objectType?: string | null;
	qualifier?: string | null;
	numericOnly?: boolean;
};

export type type = "EventEmissionRule" | "E2OEmissionRule";

export type GetAvailableAttributesResponse = {
	session: string;
	route: string;
	state: string;
	status?: number;
	msg?: string | null;
	appState?: AppState_Output | null;
	emissions?: ProcessEmissions | null;
	availableEventAttributes: Array<EventAttributeDefinition>;
	availableObjectAttributes: Array<
		[string, string | null, ObjectAttributeDefinition]
	>;
};

export type HTTPValidationError = {
	detail?: Array<ValidationError>;
};

export type JoinCondition = {
	source_attribute: string;
	target_attribute: string;
	operator?: "==" | "!=" | ">" | "<" | ">=" | "<=" | "contains" | "regex";
};

export type operator =
	| "=="
	| "!="
	| ">"
	| "<"
	| ">="
	| "<="
	| "contains"
	| "regex";

export type LocalEmissionFactor_Input = {
	source: "local";
	attributes: Array<QualifiedAttribute>;
	/**
	 * A quantity (physical, currency, ...), containing a value and (optionally) a unit.
	 */
	value: {
		value: number;
		unit?: {
			/**
			 * Unit symbol
			 */
			symbol: string | null;
			/**
			 * Long name of the unit
			 */
			name: string | null;
			/**
			 * The unit dimensionality, compatible with the `pint` python package
			 */
			dim: {
				[key: string]: number;
			};
		} | null;
	};
};

export type LocalEmissionFactor_Output = {
	source: "local";
	attributes: Array<QualifiedAttribute>;
	/**
	 * A quantity (physical, currency, ...), containing a value and (optionally) a unit.
	 */
	value: {
		value: number;
		unit?: {
			/**
			 * Unit symbol
			 */
			symbol: string | null;
			/**
			 * Long name of the unit
			 */
			name: string | null;
			/**
			 * The unit dimensionality, compatible with the `pint` python package
			 */
			dim: {
				[key: string]: number;
			};
		} | null;
	};
};

export type NominalAttribute = {
	attribute: string;
	type: "nominal";
	sample_values: Array<string | number>;
	num_unique: number;
};

export type NominalFilter = {
	type: "nominal";
	field_name: string;
	value: Array<string>;
};

export type NumberStats = {
	empty: boolean;
	count: number;
	sum: number;
	mean: number;
	min: number;
	median: number;
	max: number;
	nonzero: number;
};

export type NumericalAttribute = {
	attribute: string;
	type: "numerical";
	min: number;
	max: number;
};

export type NumericalFilter = {
	type: "numerical";
	filter: "eq" | "lt" | "gt";
	field_name: string;
	value: number;
};

export type filter = "eq" | "lt" | "gt";

export type O2ORelation = {
	src: string;
	target: string;
	qualifier: string;
	freq: number;
};

export type O2ORule = {
	relation_type?: "o2o";
	qualifier: string;
	source_type: string;
	target_type: string;
	source_filter?: ObjectFilter | null;
	target_filter?: ObjectFilter | null;
	join_conditions: Array<JoinCondition>;
};

export type ObjectAllocationConfig = {
	targetObjectTypes: Array<string>;
	rule: "AllTargets" | "ParticipatingTargets" | "ClosestTargets";
	graphMode?: "full" | "HU" | null;
	removeOtypeLoops?: boolean | null;
	maxDistance?: number | false | null;
};

export type rule = "AllTargets" | "ParticipatingTargets" | "ClosestTargets";

export type ObjectAllocationRequestBody = {
	objectAllocationConfig: ObjectAllocationConfig;
};

export type ObjectAllocationResponse = {
	session: string;
	route: string;
	state: string;
	status?: number;
	msg?: string | null;
	appState?: AppState_Output | null;
	emissions?: ProcessEmissions | null;
	objectAllocationConfig: ObjectAllocationConfig;
	objectEmissions: {
		[key: string]: number;
	};
};

export type ObjectAttributeDefinition = {
	target: "object";
	name: string;
	unit?: {
		/**
		 * Unit symbol
		 */
		symbol: string | null;
		/**
		 * Long name of the unit
		 */
		name: string | null;
		/**
		 * The unit dimensionality, compatible with the `pint` python package
		 */
		dim: {
			[key: string]: number;
		};
	} | null;
	objectType: string;
	dynamic: boolean;
};

export type ObjectFilter = {
	object_types?: Array<string> | null;
	attributes?: Array<NumericalFilter | NominalFilter> | null;
};

export type ObjectRealtionsResponse = {
	relations: Array<O2ORelation>;
	attributes: Array<OCELAttribute>;
	object_type_count: {
		[key: string]: number;
	};
};

export type ObjectTypeRequestBody = {
	objectType: string;
};

export type ObjectTypeSummary = {
	object_type: string;
	attributes: Array<NumericalAttribute | NominalAttribute>;
};

export type OCELActivityCount = {
	activity: string;
	count: number;
};

export type OCELAttribute = {
	name: string;
	target: "event" | "object";
	num_values: number;
	numeric: boolean;
	type: string;
	dynamic: boolean;
	otype?: string | null;
	activity?: string | null;
	availability?: {
		[key: string]: number;
	} | null;
	min?: number | null;
	max?: number | null;
	mean?: number | null;
	median?: number | null;
	mode?: unknown | null;
	mode_frequency?: number | null;
	frequent_values?: {
		[key: string]: number;
	} | null;
	num_unique?: number | null;
};

export type target = "event" | "object";

export type OcelData = {
	meta: {
		[key: string]: unknown;
	};
	numEvents: number;
	numObjects: number;
	activities: Array<string>;
	activityCounts: {
		[key: string]: number;
	};
	objectTypes: Array<string>;
	objectTypeCounts: {
		[key: string]: number;
	};
	medianNumEventsPerObjectType: {
		[key: string]: number;
	};
	e2oCounts: {
		[key: string]: {
			[key: string]: number;
		};
	};
	e2oQualifierCounts: {
		[key: string]: {
			[key: string]: {
				[key: string]: number;
			};
		};
	};
	attributes: Array<{
		[key: string]: unknown;
	}>;
};

export type OcelEvent = {
	id: string;
	activity: string;
	timestamp: string;
	attr: {
		[key: string]: unknown;
	};
};

export type OcelObject = {
	id: string;
	type: string;
	attr: {
		[key: string]: unknown;
	};
	relations: {
		[key: string]: Array<string>;
	} | null;
};

export type OcelResponse = {
	session: string;
	route: string;
	state: string;
	status?: number;
	msg?: string | null;
	appState?: AppState_Output | null;
	emissions?: ProcessEmissions | null;
	ocel: OcelData;
};

export type OCELSummary = {
	start_timestamp: string;
	end_timestamp: string;
	activities: Array<OCELActivityCount>;
	object_summaries: Array<ObjectTypeSummary>;
	event_summaries: {
		[key: string]: Array<NumericalAttribute | NominalAttribute>;
	};
	relation_summaries: Array<RelationCountSummary>;
};

export type OCPN = {
	objectTypes: Array<string>;
	dotString: string | null;
	structure: OcpnStructure;
};

export type OcpnRequestBody = {
	objectTypes: Array<string>;
};

export type OcpnResponse = {
	session: string;
	route: string;
	state: string;
	status?: number;
	msg?: string | null;
	appState?: AppState_Output | null;
	emissions?: ProcessEmissions | null;
	ocpn: OCPN;
};

export type OcpnStructure = {
	activityTransitions: {
		[key: string]: string;
	};
	sourcePlaces: {
		[key: string]: string;
	};
	targetPlaces: {
		[key: string]: string;
	};
	silentTransitions: {
		[key: string]: Array<string>;
	};
	places: {
		[key: string]: Array<string>;
	};
	arcs: Array<Arc>;
};

export type PaginatedResponse_OcelEvent_ = {
	page: number;
	totalPages: number;
	data: Array<OcelEvent>;
};

export type PaginatedResponse_OcelObject_ = {
	page: number;
	totalPages: number;
	data: Array<OcelObject>;
};

export type ProcessEmissions = {
	/**
	 * A unit (physical, currency, ...), represented by a symbol, name, and dimensionality.
	 */
	unit: {
		/**
		 * Unit symbol
		 */
		symbol: string | null;
		/**
		 * Long name of the unit
		 */
		name: string | null;
		/**
		 * The unit dimensionality, compatible with the `pint` python package
		 */
		dim: {
			[key: string]: number;
		};
	};
	apiState?: string | null;
	readonly overallEmissions: number;
	readonly overallImportedEmissions: number;
	readonly overallRuleBasedEmissions: number;
	readonly activityEmissions: {
		[key: string]: NumberStats;
	};
	readonly state: EmissionsState;
};

export type QualifiedAttribute = {
	qualifier: string | null;
	attribute: EventAttributeDefinition | ObjectAttributeDefinition;
};

export type RelationCountSummary = {
	qualifier: string;
	activity: string;
	object_type: string;
	min_count: number;
	max_count: number;
};

export type SampleEventsResponse = {
	session: string;
	route: string;
	state: string;
	status?: number;
	msg?: string | null;
	appState?: AppState_Output | null;
	emissions?: ProcessEmissions | null;
	events: Array<OcelEvent>;
};

export type SampleObjectsResponse = {
	session: string;
	route: string;
	state: string;
	status?: number;
	msg?: string | null;
	appState?: AppState_Output | null;
	emissions?: ProcessEmissions | null;
	objects: Array<OcelObject>;
};

export type TaskResponse = {
	id: string;
	route: string;
	taskState: TaskState;
	percentage?: number | null;
	msg?: string | null;
	result?: BaseResponse | null;
};

export type TaskState =
	| "PENDING"
	| "STARTED"
	| "PROGRESS"
	| "SUCCESS"
	| "FAILURE"
	| "RETRY";

export type TaskStatusResponse = {
	session: string;
	route: string;
	state: string;
	status?: number;
	msg?: string | null;
	appState?: AppState_Output | null;
	emissions?: ProcessEmissions | null;
	task: TaskResponse;
};

export type TimeSpan = {
	start?: string | null;
	end?: string | null;
};

export type UpdateAppStateRequestBody = {
	/**
	 * User input to be saved in the server session
	 */
	appState: AppState_Input;
};

export type UpdateAppStateResponse = {
	session: string;
	route: string;
	state: string;
	status?: number;
	msg?: string | null;
	appState?: AppState_Output | null;
	emissions?: ProcessEmissions | null;
};

export type UpsertAttributesRequest = {
	ext_table: Array<{
		[key: string]: unknown;
	}>;
	table: "objects" | "events";
	merge_fields: Array<[string, string]>;
	added_columns: Array<[string, string]>;
	replace?: boolean;
};

export type table = "objects" | "events";

export type UpsertObjectsRequest = {
	/**
	 * List of object rows as dicts
	 */
	ext_table: Array<{
		[key: string]: unknown;
	}>;
	/**
	 * Tuple of (oid column, otype column)
	 */
	object_fields: [string, string];
	/**
	 * List of (CSV column, OCEL attribute)
	 */
	added_attributes: Array<[string, string]>;
	replace?: boolean;
};

export type ValidateEmissionRuleRequest = {
	rule: EventEmissionRule_Input | E2OEmissionRule_Input;
};

export type ValidateEmissionRuleResponse = {
	session: string;
	route: string;
	state: string;
	status?: number;
	msg?: string | null;
	appState?: AppState_Output | null;
	emissions?: ProcessEmissions | null;
	rule: EventEmissionRule_Output | E2OEmissionRule_Output;
};

export type ValidationError = {
	loc: Array<string | number>;
	msg: string;
	type: string;
};

export type WeightedDirectedGraphResponse = {
	session: string;
	route: string;
	state: string;
	status?: number;
	msg?: string | null;
	appState?: AppState_Output | null;
	emissions?: ProcessEmissions | null;
	graph: {
		[key: string]: {
			[key: string]: number;
		};
	};
};

export type EventsEditorEventsPostData = {
	oceanSessionId: string;
	page?: number;
	requestBody: EventFilter;
	size?: number;
	sortBy?: string | null;
};

export type EventsEditorEventsPostResponse = PaginatedResponse_OcelEvent_;

export type ObjectsEditorObjectsPostData = {
	oceanSessionId: string;
	page?: number;
	requestBody: ObjectFilter;
	size?: number;
	sortBy?: string | null;
};

export type ObjectsEditorObjectsPostResponse = PaginatedResponse_OcelObject_;

export type InfoEditorInfoPostData = {
	oceanSessionId: string;
	requestBody: EventFilter;
};

export type InfoEditorInfoPostResponse = OCELSummary;

export type UpsertAttributesEndpointEditorOcelUpsertAttributesPostData = {
	oceanSessionId: string;
	requestBody: UpsertAttributesRequest;
};

export type UpsertAttributesEndpointEditorOcelUpsertAttributesPostResponse =
	unknown;

export type UpsertObjectsEndpointEditorOcelUpsertObjectsPostData = {
	oceanSessionId: string;
	requestBody: UpsertObjectsRequest;
};

export type UpsertObjectsEndpointEditorOcelUpsertObjectsPostResponse = unknown;

export type ApplyO2oRuleEndpointEditorOcelApplyO2oPostData = {
	oceanSessionId: string;
	requestBody: ApplyO2ORuleRequest;
};

export type ApplyO2oRuleEndpointEditorOcelApplyO2oPostResponse = unknown;

export type DistributeValueEndpointEditorOcelDistributeValuePostData = {
	oceanSessionId: string;
	requestBody: DistributeRequest;
};

export type DistributeValueEndpointEditorOcelDistributeValuePostResponse =
	unknown;

export type ObjectsRelationsOverviewObjectGraphPostData = {
	oceanSessionId: string;
};

export type ObjectsRelationsOverviewObjectGraphPostResponse =
	ObjectRealtionsResponse;

export type TaskStatusTaskStatusGetData = {
	oceanSessionId: string;
	taskId: string;
};

export type TaskStatusTaskStatusGetResponse = TaskStatusResponse;

export type ValidateEmissionRuleValidateEmissionRulePostData = {
	oceanSessionId: string;
	requestBody: ValidateEmissionRuleRequest;
};

export type ValidateEmissionRuleValidateEmissionRulePostResponse =
	ValidateEmissionRuleResponse;

export type GetAvailableAttributesForEmissionRuleGetAvailableAttributesPostData =
	{
		oceanSessionId: string;
		requestBody: GetAvailableAttributesRequest;
	};

export type GetAvailableAttributesForEmissionRuleGetAvailableAttributesPostResponse =
	GetAvailableAttributesResponse;

export type ComputeEmissionsComputeEmissionsPostData = {
	oceanSessionId: string;
	requestBody: ComputeEmissionsRequestBody;
};

export type ComputeEmissionsComputeEmissionsPostResponse =
	| TaskStatusResponse
	| ComputeEmissionsResponse;

export type DiscoverDfgDfgPostData = {
	oceanSessionId: string;
	requestBody: ObjectTypeRequestBody;
};

export type DiscoverDfgDfgPostResponse = WeightedDirectedGraphResponse;

export type DiscoverEfgEfgPostData = {
	oceanSessionId: string;
	requestBody: ObjectTypeRequestBody;
};

export type DiscoverEfgEfgPostResponse = DirectedGraphResponse;

export type OcpnOcpnPostData = {
	oceanSessionId: string;
	requestBody: OcpnRequestBody;
};

export type OcpnOcpnPostResponse = OcpnResponse;

export type ObjectAllocationObjectAllocationPostData = {
	oceanSessionId: string;
	requestBody: ObjectAllocationRequestBody;
};

export type ObjectAllocationObjectAllocationPostResponse =
	ObjectAllocationResponse;

export type ImportOcelImportPostData = {
	formData: Body_import_ocel_import_post;
	/**
	 * The name of the uploaded file
	 */
	name: string;
};

export type ImportOcelImportPostResponse = OcelResponse;

export type ImportDefaultOcelImportDefaultGetData = {
	/**
	 * Default OCEL key
	 */
	key: string;
	/**
	 * Dataset version (optional)
	 */
	version?: string | null;
};

export type ImportDefaultOcelImportDefaultGetResponse = OcelResponse;

export type LoadOcelLoadGetData = {
	oceanSessionId: string;
};

export type LoadOcelLoadGetResponse = OcelResponse;

export type DownloadOcelDownloadGetData = {
	/**
	 * Controls on what level emission values are included in the resulting OCEL file as a new attribute. To preserve overall emissions, it is not possible to include both event and object emissions.
	 */
	emissions?: "events" | "objects";
	oceanSessionId: string;
	token: string;
};

export type DownloadOcelDownloadGetResponse = unknown;

export type UpdateStateUpdatePutData = {
	oceanSessionId: string;
	requestBody: UpdateAppStateRequestBody;
};

export type UpdateStateUpdatePutResponse = UpdateAppStateResponse;

export type SampleObjectsSampleObjectsGetData = {
	oceanSessionId: string;
};

export type SampleObjectsSampleObjectsGetResponse = SampleObjectsResponse;

export type SampleEventsSampleEventsGetData = {
	oceanSessionId: string;
};

export type SampleEventsSampleEventsGetResponse = SampleEventsResponse;

export type DefaultOcelsOcelDefaultGetData = {
	onlyLatestVersions?: boolean;
	onlyPreloaded?: boolean;
};

export type DefaultOcelsOcelDefaultGetResponse = Array<DefaultOCEL>;

export type GetClimatiqUnitsClimatiqUnitsListGetResponse =
	Array<ClimatiqUnitType>;

export type UnitSearchUnitsSearchGetData = {
	q: string;
};

export type UnitSearchUnitsSearchGetResponse = {
	/**
	 * Unit symbol
	 */
	symbol: string | null;
	/**
	 * Long name of the unit
	 */
	name: string | null;
	/**
	 * The unit dimensionality, compatible with the `pint` python package
	 */
	dim: {
		[key: string]: number;
	};
} | null;
